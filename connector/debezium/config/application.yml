const:
  - &solace tcp://solace:55555
  - &vpn default
  - &conn-user connector
  - &conn-pwd connector
  - &topic solace/cdc/event
  - &queue FROM-CDC

server.port: 8085

spring:
  cloud:
    stream:
      bindings:  # Workflow bindings
        input-0:
          destination: *queue   # Queue name
          binder: solace
        output-0:
          destination: producer-destination  # CDC producer destination
          binder: cdcsupplier
        input-1:
#          destination: consumer-destination  # CDC consumer destination
          binder: cdcsupplier
        output-1:
          destination: *topic   # Topic name
          binder: solace

solace:
  connector:
    workflows:
      0.enabled: false
      1.enabled: true
      #   security:
      #     enabled: true  # If true, security is enabled. Otherwise, anyone has access to the connectorâ€™s endpoints.
      #     csrf-enabled: true  # If true, CSRF protection is enabled. Makes sense only if solace.connector.security.enabled is true.
      #     users:  # User configuration
      #       - name: <user-name>  # The name of this user.
      #         password: <user-password>  # The password for this user.
      #         roles:  # The list of roles which this user has. Has read-only access if no roles are given. (values: admin)
      #           - <role>

      #       - name: user  # Example: Creates a read-only user
      #         password: pass
      #       - name: admin  # Example: Creates a user with admin role
      #         password: admin
      #         roles:
      #           - admin
    security.enabled: false
  java:
    host: *solace
    msg-vpn: *vpn
    client-username: *conn-user
    client-password: *conn-pwd
    # connect-retries:
    # reconnect-retries:
    # connectRetriesPerHost:
management:
  security.enabled: false
  metrics: # Metrics monitoring systems. For more info: https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.metrics
    export:
      #      defaults:
      #        enabled: false
      simple:
        enabled: true
  #      <system>:
  #        enabled: false
  #  endpoint:
  #    health:
  #      show-components: never
  #      show-details: never
  endpoints:
    web: # Actuator web endpoint configuration. For more info: https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints. Initial set of metrics is defined as a bare minimum for Connector Manager compatibility. To shrink it simply remove unnecessary ones
      exposure:
        include: "*"
logging: # Logging configuration. For more info: https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.logging
  level:
    root: warn
    com.solace.connector.core: TRACE # Enables TRACE logs for connector framework
    com.solace.spring.cloud.stream.binder: TRACE # Enables TRACE logs for Solace binder
    com.solacecoe.spring.cloud.stream.binder.cdc: TRACE # Enables INFO logs for CDC Debezium supplier binder
  file:
    name: myapp.log  # base log file name
  logback:
    rollingpolicy: # Logback file rolling policy
      file-name-pattern: "${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz"  # Pattern for rolled-over log file names. Example: Rolls the log file into an archive once every day. `%i` is reset to `0` at the start of the day.
      max-file-size: 100MB  # The maximum size of log file before it is archived. Example: Within a given day, when the log file reaches 100 MB, archive it, and increment `%i`.
      max-history: 7  # The maximum rotation-period's worth of archive log files to keep. Example: Since the `file-name-pattern` is configured to rollover once every day, keep 7 days worth of log archives.
      total-size-cap: 1GB  # Total size of log backups for a given rotation period. Example: Keep up-to 1 GB of log archives for every day.
cdc:
  stream:
    retryDelayOnException: 2000 #milliseconds to wait before next retry
    retriesOnException: 3
    failIfDynamicDestinationMismatch: false # true -> will stop the connector in case of wrong column name configuration in dynamic destination, false -> fallback to default destination if configured dynamicDestination fails due to wrong column name configuration
    # dynamicDestination: # overwrites the solace topic configured in line #9 Users can configure "dynamicDestination" property to build dynamic topic based on table, operation and column data. For example orders:spring/cdc/mssql/{tablename}/{operation}/APAC/{col|order_id};users:spring/cdc/mssql/{tablename}/{operation}/{col|user_id}.
    # # So orders table topic will be constructed as spring/cdc/mssql/orders/c/APAC/ORD_12 and same convention follows for users table spring/cdc/mssql/users/c/USR_12
    # # If column names are incorrect the connector will fail if failIfDynamicDestinationMismatch is set to true or fallback to output destination(Static topic) if failIfDynamicDestinationMismatch is set to false.
    dynamicDestination: CUSTOMER:usaa/cdc/customer/{operation}/{col|customer_num};CUSTOMER_ORDER:usaa/cdc/order/{operation}/{col|order_num}
  schema: false # This has to be sync as per the value below
  # If flattening is true only the changed record will be published
  flattening.enabled: true
debezium:
  properties:
    # max:
    #   batch:
    #     size: # this configuration reduces the number of duplicates when a batch is reprocessed. Set to 1 to process one message in a batch to avoid duplicates.
    #   queue:
    #     size: # this configuration is used to limit the number of messages stored in internal queue by debezium while querying database for change events.
    decimal.handling.mode: string 
    include.schema.changes: false
    offset:
      flush.interval.ms: 0
      storage.file.filename: ./offset.dat #External file location to preserve offsets. Files are stored using extension .dat
    topic.prefix: "cdc_mssql"
    schema.history.internal.file.filename: ./dbhistory.dat
    database:
      encrypt: false
      user: sa
      server:
        id: 22544 #unique id for this connector instance. In HA setup the same id should be used in standby
        name: CDCMSSqlDemo # unique name for this connector instance. In HA setup the same name should be used in standby
      password: yourStrong(!)Password
      names: DEMO
      port: 1433
      hostname: mssql
      allowPublicKeyRetrieval: true
    table:
      include:
        list: dbo.CUSTOMER,dbo.CUSTOMER_ORDER
    connector.class: io.debezium.connector.sqlserver.SqlServerConnector
    name: mssql-cdc-connector